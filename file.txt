Nom du fichier : depouillement.inc.php
<?php


/**
 * Afficher le récapitulatif de dépouillement : canddiats élus, votes exprimés, votants
 */
function ag_recap_depouillement($users)
{
    if (!count($users)) {
        ?>
        <center><b>Les votes récoltés sont pour l'instant insufisants pour déterminer les élus</b></center>
        <?php
        return;
    }
    ?>
    <center>
        <b>
            <?= count($users); ?> candidats élus -
            <?= ag_votants(); ?> électeur/trices
        </b>
        <?php $candidats_en_rab = count($users) - ag_max();
        if ($candidats_en_rab>0) { ?>
            <br><small>
                <?= $candidats_en_rab; ?> candidat(e)
                <?= $candidats_en_rab > 1 ? 's' : ''; ?> en plus ont été sélectionné(e)s car ils avaient le même nombre de votes
                que
                la
                <?= ag_max(); ?>e personne dans la liste
            </small>
        <?php } ?>
    </center>
    <?php
}
/**
 * Indique si la page actuelle est en mode 'affichage du dépouillement'
 */
function ag_depouillement()
{
    if (!isset($_GET['depouillement']))
        return;
    if (!current_user_can('administrator'))
        return;
    return true;
}


function ag_faire_depouillement($candidats)
{
    $candidats = array_filter($candidats, function ($candidat) {
        return ag_candidat_votes($candidat->ID) > 0;
    });
    usort($candidats, function ($a, $b) {
        $a = ag_candidat_votes($a->ID);
        $b = ag_candidat_votes($b->ID);
        if ($a == $b) {
            return 0;
        }
        return ($a < $b) ? 1 : -1;
    });
    if (count($candidats) > ag_max()) {
        $dernier_vote_accepte = ag_candidat_votes($candidats[ag_max() - 1]->ID);
        $candidats = array_filter($candidats, function ($candidat) use ($dernier_vote_accepte) {
            return ag_candidat_votes($candidat->ID) >= $dernier_vote_accepte;
        });
    }

    return $candidats;
}Nom du fichier : file.txt
Nom du fichier : depouillement.inc.php
<?php


/**
 * Afficher le récapitulatif de dépouillement : canddiats élus, votes exprimés, votants
 */
function ag_recap_depouillement($users)
{
    if (!count($users)) {
        ?>
        <center><b>Les votes récoltés sont pour l'instant insufisants pour déterminer les élus</b></center>
        <?php
        return;
    }
    ?>
    <center>
        <b>
            <?= count($users); ?> candidats élus -
            <?= ag_votants(); ?> électeur/trices
        </b>
        <?php $candidats_en_rab = count($users) - ag_max();
        if ($candidats_en_rab>0) { ?>
            <br><small>
                <?= $candidats_en_rab; ?> candidat(e)
                <?= $candidats_en_rab > 1 ? 's' : ''; ?> en plus ont été sélectionné(e)s car ils avaient le même nombre de votes
                que
                la
                <?= ag_max(); ?>e personne dans la liste
            </small>
        <?php } ?>
    </center>
    <?php
}
/**
 * Indique si la page actuelle est en mode 'affichage du dépouillement'
 */
function ag_depouillement()
{
    if (!isset($_GET['depouillement']))
        return;
    if (!current_user_can('administrator'))
        return;
    return true;
}


function ag_faire_depouillement($candidats)
{
    $candidats = array_filter($candidats, function ($candidat) {
        return ag_candidat_votes($candidat->ID) > 0;
    });
    usort($candidats, function ($a, $b) {
        $a = ag_candidat_votes($a->ID);
        $b = ag_candidat_votes($b->ID);
        if ($a == $b) {
            return 0;
        }
        return ($a < $b) ? 1 : -1;
    });
    if (count($candidats) > ag_max()) {
        $dernier_vote_accepte = ag_candidat_votes($candidats[ag_max() - 1]->ID);
        $candidats = array_filter($candidats, function ($candidat) use ($dernier_vote_accepte) {
            return ag_candidat_votes($candidat->ID) >= $dernier_vote_accepte;
        });
    }

    return $candidats;
}Nom du fichier : file.txt
Nom du fichier : formulaire.inc.php
<?php


/**
 * Formualaire de vote
 */

if (!get_current_user_id()) {
    // page réservée aux membres connectés: Si personne n'est connecté, on redirige vers le formulaire de connexion
    wp_redirect('/mon-compte/?redirect=/candidats-au-conseil-d-administration/');
    exit;
}
$users = get_users_candidat_au_ca();
if (ag_depouillement()) {
    // Si la page est celle du dépouillement, la liste des utilisateurs est modifiée pour ne conserver que les élus 
    $users = ag_faire_depouillement($users);
}
?>
<center>
    <h2>Association Coworking Metz</h2>
    <h1>Élection du conseil d'administration</h1>
    <h2>Assemblée générale du
        <?= date('d/m/Y', strtotime(ag_date())); ?>
    </h2>
</center>

<form class="candidats" method="post" action="/election-ca">
    <input type="hidden" name="action" value="election-ca">
    <?php if (ag_depouillement()) { ?>
        <?php ag_recap_depouillement($users); ?>
    <?php } else { ?>
        <center>
            <?= count($users); ?> candidats au total
        </center>

        <?php if (ag_voter()) { ?>
            <div class="vote-status">
                <div class="contenu">
                    <?php if (!is_user_electeur()) { ?>
                        <strong>Vous ne pouvez pas participer à ce vote</strong>
                    <?php } ?>
                    <?php if (a_deja_vote()) { ?>
                        <strong>Votre vote pour cette élection a été pris en compte.</strong>
                    <?php } ?>
                </div>
                <div>
                    <?php if (is_user_electeur()) { ?>
                        <button class="btn" type="submit">Valider votre choix</button>
                    <?php } ?>
                </div>
            </div>
        <?php } ?>
    <?php } ?>
    <ul>
        <?php
        foreach ($users as $user) { ?>
            <li>
                <?php if (ag_voter() && !a_deja_vote()) { ?>
                    <input type="checkbox" name="candidats[]" value="<?= $user->ID; ?>"
                        title="Sélectionner <?= $user->display_name; ?>">
                <?php } ?>

                <span>
                    <strong>
                        <?= $user->display_name; ?>
                    </strong>
                    <?php if (ag_depouillement()) { ?>
                        <p>
                            <?= ag_candidat_votes($user->ID) ?> votes
                        </p>
                    <?php } ?>
                </span>
                <figure>
                    <img src="/polaroid/<?= $user->ID; ?>.jpg">
                </figure>
            </li>
        <?php } ?>
    </ul>
</form>
<br><br>
<br><br>
<br><br>
<script>
    // Variables mises à disposition de vote.js
    const a_deja_vote = <?=json_encode(a_deja_vote());?>;
    const ag_voter = <?= json_encode(ag_voter()); ?>;
    const ag_max = <?= ag_max(); ?>;
    const ag_min = <?= ag_min(); ?>;

</script>

<style>

</style>Nom du fichier : log.inc.php
<?php

/**
 * FONCTION DE LOGS
 * Pour consulter la log en temsp réeel, aller sur https://coworking-metz-ag.requestcatcher.com/
 */


/**
 * Enregistre un message d'erreur et termine le script.
 *
 * Cette fonction est utilisée pour enregistrer un message d'erreur dans un service externe
 * avant d'arrêter l'exécution du script PHP. Elle fait appel à `ag_log_message` pour l'enregistrement
 * du message et utilise `exit` pour arrêter l'exécution.
 *
 * @param string $message Le message d'erreur à enregistrer.
 */
function ag_log_erreur($message)
{
    ag_log_message($message);
    exit;
}

/**
 * Enregistre un message dans un service externe.
 *
 * Cette fonction envoie un message, avec des informations supplémentaires comme la date et l'heure actuelles,
 * l'adresse IP du client, l'ID de l'utilisateur actuel et le nom d'affichage de l'utilisateur,
 * à un service externe via une requête POST. 
 *
 * @param string $message Le message à enregistrer.
 */
function ag_log_message($message)
{
    // Préparation des données à envoyer
    $data = [
        'message' => $message,
        'datetime' => date('Y-m-d H:i:s'), // Date et heure actuelles
        'ip' => $_SERVER['REMOTE_ADDR'], // Adresse IP du client
        'uid'=> get_current_user_id(), // ID de l'utilisateur actuel
        'name'=> wp_get_current_user()->display_name??'', // Nom d'affichage de l'utilisateur actuel
    ];

    // Encodage des données en JSON
    $jsonPayload = json_encode($data, JSON_PRETTY_PRINT);

    // Initialisation de cURL
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, "https://coworking-metz-ag.requestcatcher.com/log");
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonPayload);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/json',
        'Content-Length: ' . strlen($jsonPayload)
    ]);

    // Exécution de la requête POST
    $response = curl_exec($ch);
    // Vérification des erreurs
    if (curl_errno($ch)) {
        echo 'Error:' . curl_error($ch);
    }
    // Fermeture de la session cURL
    curl_close($ch);
}
Nom du fichier : main.inc.php
<?php

/**
 * Inclusions des différents fichiers nécéssaires au fonctionnement
 */
include __DIR__ . '/vote.inc.php'; // fonctions relatives aux votes
include __DIR__ . '/users.inc.php'; // fonctions relatives aux utilisateurs et candidats
include __DIR__ . '/log.inc.php'; // fonctions de log
include __DIR__ . '/reglages.inc.php'; // fonctions pour lire les réglages de l'ag
include __DIR__ . '/depouillement.inc.php'; // fonctions relatives au dépouillement des votes

/**
 * Ajout des CSS et JS dédiées au formulaire de vote
 */
add_action('wp_enqueue_scripts', function () {
    if(is_admin()) return;
    if (is_page('election-ca')) {
        $base = '/wp-content/mu-plugins/includes/ag';
        $css = $base . '/vote.css';
        wp_enqueue_style('vote-style', $css, [], filemtime(ABSPATH.$css));
        $js = $base . '/vote.js';
        wp_enqueue_script('vote-script', $js, array (), filemtime(ABSPATH.$js), true);
    }
});

/**
 * Fonction utilisée par la page wordpress election-ca pour afficher le formulaire de vote
 */
function ag_candidats()
{
    include __DIR__ . '/formulaire.inc.php';
}


/**
 * Génère un UUID en utilisant l'API https://www.uuidtools.com/api/generate/v1
 *
 * Cette fonction fait une requête à l'API uuidtools pour générer un UUID de version 1.
 * Elle utilise cURL pour faire la requête et retourne l'UUID sous forme de chaîne de caractères.
 * En cas d'échec de la requête, elle retournera null.
 *
 * @return string|null L'UUID généré ou null en cas d'échec.
 */
function generate_uuid() {
    $curl = curl_init("https://www.uuidtools.com/api/generate/v1");
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    $response = curl_exec($curl);
    curl_close($curl);
    
    if ($response) {
        $uuids = json_decode($response);
        return $uuids[0] ?? null;
    }
    
    return null;
}Nom du fichier : README.md
Nom du fichier : reglages.inc.php
<?php

/**
 * Récupère les paramètres de l'assemblée générale depuis la page d'options ACF.
 *
 * Cette fonction utilise ACF pour récupérer les paramètres de l'assemblée générale
 * stockés dans les options du thème. Elle retourne un tableau avec tous les paramètres
 * liés à l'assemblée générale.
 *
 * @return array Les paramètres de l'assemblée générale.
 */
function ag_settings()
{
    return get_field('assemblee_generale', 'option');
}

/**
 * Récupère le nombre maximum de candidats pour le conseil d'administration.
 *
 * Cette fonction retourne le nombre maximum de candidats pour le conseil d'administration
 * défini dans les paramètres de l'assemblée générale. Si la valeur n'est pas définie,
 * elle retourne une valeur par défaut de 9.
 *
 * @return int Le nombre maximum de candidats pour le CA.
 */
function ag_max()
{
    return ag_settings()['scrutin']['ca_max'] ?? 9;
}

/**
 * Récupère le nombre minimum de candidats pour le conseil d'administration.
 *
 * Cette fonction retourne le nombre minimum de candidats pour le conseil d'administration
 * défini dans les paramètres de l'assemblée générale. Si la valeur n'est pas définie,
 * elle retourne une valeur par défaut de 0.
 *
 * @return int Le nombre minimum de candidats pour le CA.
 */
function ag_min()
{
    return ag_settings()['scrutin']['ca_min'] ?? 0;
}

/**
 * Récupère la date de l'assemblée générale.
 *
 * Cette fonction retourne la date de l'assemblée générale telle que définie dans les
 * paramètres. Si la date n'est pas définie, elle retourne false par défaut.
 *
 * @return string La date de l'assemblée générale.
 */
function ag_date()
{
    return ag_settings()['details']['ag_date'] ?? false;
}
Nom du fichier : users.inc.php
<?php

/**
 * FONCTION RELATIVES AUX UTILISATEURS ET CANDIDATS
 */

 
/**
 * Récupère tous les utilisateurs dont le meta 'candidat_au_ca' n'est pas false.
 *
 * @return WP_User[] Liste des utilisateurs.
 */
function get_users_candidat_au_ca($depouillement = false)
{
    $users = get_users([
        'meta_key' => 'candidat_au_ca',
        'meta_value' => '',
        'meta_compare' => '!=',
        'fields' => 'all',
    ]);

    $users = array_filter($users, function ($user) {
        return $user->candidat_au_ca;
    });
    shuffle($users);

    return $users;
}

/**
 * Retourne tous les comptes utilisateurs identifiés comme électeurs par l'API Tickets
 * La données est mise en cache pendant 12h pour éviter une surcharge d'appels à tickets
 * @return array
 */
function get_users_electeurs()
{
    // Check if the transient already exists
    $votants = get_transient('users_electeurs');
    if (false === $votants) {
        // Transient does not exist, so we fetch the data
        $json = file_get_contents('https://tickets.coworking-metz.fr/api/voting-members?key=bupNanriCit1');
        $votants = json_decode($json, true);
        // Store the result in a transient that expires after 12 hours (43200 seconds)
        set_transient('users_electeurs', $votants, 12 * HOUR_IN_SECONDS);
    }
    return $votants;
}
/**
 * Indique si un utilisateurs est considéré comme électeur
 * Un électeur est un membre ayant un age minimal (par exemple: 16 ans) et un nombre 
 * minimal de journées coworkées dans les X derniers mois (exemple : 20 journées sur 6 mois)
 * La règle de gestion précise est dans l'API Tcikets https://github.com/coworking-metz/tickets-backend
 */
function is_user_electeur($uid = false)
{

    if (!$uid)
        $uid = get_current_user_id();
    if (!$uid)
        return;
    $user = get_userdata($uid);
    if (!$user)
        return;

    if (isset($GLOBALS['is_user_electeur-' . $uid])) {
        return $GLOBALS['is_user_electeur-' . $uid];
    }
    $GLOBALS['is_user_electeur-' . $uid] = false;
    $votants = get_users_electeurs();
    foreach ($votants as $votant) {
        if ($votant['email'] == $user->user_email) {
            $GLOBALS['is_user_electeur-' . $uid] = true;
            return true;
        }
    }
}
Nom du fichier : vote.css
h1,
h2 {
    margin: 0 !important;
}

h2 {
    font-size: clamp(0.7rem, 5vmax, 1.5rem) !important;
}

h1 {
    font-size: clamp(1rem, 5vmax, 2rem) !important;
}



#wpadminbar,
#footer,
.titlebar {
    display: none !important;
}

.container {
    width: 99% !important;
}

#brevo-conversations {
    display: none !important;
}

.vote-status {
    padding: .5em;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    z-index: 99999999999;
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    background-color: #f3b100;
    flex-direction: column;
    text-align: center;
}

@media screen and (min-width: 600px) {
    .vote-status {
        gap: 2rem;
        flex-direction: row;
    }
}

.vote-status button {
    padding: .5em;
    color: black;
}

.candidats ul {
    margin: 0;
    padding: 0;
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-direction: row;
    flex-wrap: wrap;
}

.candidats li {
    padding: .5em;
    font-size: .8em;
}

.candidats li img {
    max-width: 40vw;
}

@media screen and (min-width: 600px) {
    .candidats {
        gap: 2rem;
    }

    .candidats li img {
        max-width: 200px;
    }

    .candidats li {
        padding: 1em;
    }
}

.candidats li {
    text-align: center;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    position: relative;
    border-radius: 5px;
}

.candidats li input {
    cursor: pointer;
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    z-index: 2;

}


.candidats li img {
    transition: opacity .5s ease;
    opacity: 0.8;
    width: 100%;
    height: auto;
    display: block;
}

@media screen and (min-width: 600px) {

    .candidats li:has(input):hover {
        background-color: #f3b100;
    }
}

.candidats li:has(input:checked) {
    background-color: green;
}

.candidats li:has(input:checked) img {
    opacity: 1;
}Nom du fichier : vote.inc.php
<?php

/**
 * FONCTIONS RELATIVES AUX VOTES
 */

/**
 * Gère le vote de l'utilisateur pour les candidats au conseil d'administration.
 * 
 * Ce code vérifie d'abord si le paramètre 'ag-vote' est présent dans l'URL. Si oui, il attache une fonction anonyme 
 * à l'action 'init' de WordPress. Cette fonction effectue les actions suivantes :
 * 1. Récupère l'ID de l'utilisateur actuel.
 * 2. Si aucun utilisateur n'est connecté, arrête l'exécution du script.
 * 3. Vérifie si l'utilisateur a déjà voté. Si oui, enregistre une erreur de tentative de vote multiple.
 * 4. Sauvegarde anonyme des votes de l'utilisateur pour les candidats sélectionnés.
 * 5. Redirige l'utilisateur vers la page des candidats au conseil d'administration.
 * 
 * @return void
 */

if (($_POST['action']??false) === 'election-ca') {
    add_action('init', function () {
        $uid = get_current_user_id();

        if (!$uid)
            exit;

        if (a_deja_vote($uid))
            ag_log_erreur('Tentative de vote multiple');

        ag_sauver_votes($uid, $_POST['candidats']);
        wp_redirect('/election-ca/');
        exit;
    });
}

/**
 * Vérifie si l'état du scrutin permet de voter
 * 
 * Cette fonction contrôle d'abord si le scrutin est ouvert en vérifiant l'état de 'etat_vote' dans la configuration du scrutin.
 * Elle vérifie ensuite si on est sur la page de dépouillement. Le vote n'est pas possible lors du dépouillement,
 * Elle verifie ensuite que l'utilisateur courant est autorisé à voter (membre électeur). 
 * Si l'une de ces conditions n'est pas remplie, la fonction termine son exécution.
 * Si toutes les vérifications sont passées, la fonction retourne true, indiquant que le vote est possible.
 * 
 * @return bool|null Retourne true si l'utilisateur peut voter, sinon null si une des conditions empêche le vote.
 */
function ag_voter()
{

    if (ag_settings()['scrutin']['etat_vote'] == 'closed')
        return;
    if (ag_depouillement())
        return;

    if (!is_user_electeur())
        return;

    return true;
}

/**
 * Compte le nombre d'électeurs ayant déjà voté pour une date donnée.
 * 
 * Cette fonction récupère le nombre d'utilisateurs ayant voté,
 * basé sur la date actuelle du scrutin. 
 * Le résultat est le nombre d'utilisateurs qui ont déjà voté.
 * 
 * @return int Le nombre d'utilisateurs ayant déjà voté.
 */
function ag_votants()
{
    $key = 'a-vote-' . ag_date();
    $args = [
        'meta_query' => [
            [
                'key' => $key,
                'compare' => 'EXISTS',
            ],
        ]
    ];

    $users = get_users($args);

    return count($users);
}

/**
 * Enregistre les votes d'un utilisateur pour les candidats sélectionnés.
 * 
 * Cette fonction génère un identifiant unique (UUID) pour le votant, récupère la date actuelle du scrutin. 
 * La fonction enregistre le vote avec l'heure actuelle et l'UUID généré. Elle met également à jour l'utilisateur pour indiquer
 * qu'il a voté à cette date. Un message est loggé pour confirmer l'enregistrement du vote.
 * 
 * @param int $uid L'ID de l'utilisateur votant.
 * @param array $candidats Les IDs des candidats sélectionnés.
 * @return void
 */
function ag_sauver_votes($uid, $candidats)
{
    $uuid = generate_uuid();

    $date = ag_date();
    $key = 'votes-' . $date;

    $candidats = $_POST['candidats'] ?? false;

    foreach ($candidats as $candidat) {
        $votes = get_user_meta($candidat, $key, true);
        if (!$votes) {
            $votes = [];
        }
        $votes[$uuid] = ['time' => time(), 'uuid' => $uuid];
        update_user_meta($candidat, $key, $votes);
    }

    update_user_meta($uid, 'a-vote-' . $date, true);
    ag_log_message('Vote enregistré');
}
/**
 * Vérifie si l'utilisateur a déjà voté pour la date courante.
 *
 * Cette fonction vérifie si l'utilisateur spécifié par son identifiant (ou l'utilisateur actuellement connecté
 * si aucun identifiant n'est fourni) a une métadonnée indiquant qu'il a voté pour la date courante.
 *
 * @param int|bool $uid L'identifiant de l'utilisateur. Si faux, utilise l'ID de l'utilisateur actuellement connecté.
 * @return mixed La valeur de la métadonnée 'a-vote-' suivi de la date actuelle si elle existe, faux sinon.
 */
function a_deja_vote($uid = false)
{
    if (!$uid)
        $uid = get_current_user_id();
    $date = ag_date();
    $key = 'a-vote-' . $date;
    return get_user_meta($uid, $key, true);
}
/**
 * Compte le nombre de votes pour un utilisateur donné pour la date d'ag courante.
 *
 * @param int $uid L'identifiant de l'utilisateur dont on veut compter les votes.
 * @return int Le nombre de votes pour l'utilisateur spécifié pour la date courante, ou zéro si aucune métadonnée n'existe.
 */
function ag_candidat_votes($uid)
{
    $date = ag_date();
    $key = 'votes-' . $date;

    $votes = get_user_meta($uid, $key, true);
    if (!$votes)
        return 0;

    return count($votes);
}


Nom du fichier : vote.js
/**
 * Gestion de l'interface de vote
 */

document.addEventListener('DOMContentLoaded', () => {
    const form = document.querySelector('form.candidats');
    // effectuer une action lorsque le formulaire est soumis
    form.addEventListener('submit', e => {
        // Affiche une boîte de confirmation avant de soumettre le formulaire, demandant une validation de l'utilisateur
        // Si l'utilisateur ne confirme pas, empêche la soumission du formulaire
        if (!confirm(`Vous avez choisi ${selected()} candidat(e)s. Voulez-vous valider votre choix ?\nVotre votre sera définitif et ne pourra être modifié. `)) {
            e.preventDefault();
            return false;
        }
    })

    // Sélectionne tous les champs de saisie du formulaire et ajoute un écouteur d'événements 'input' à chacun
    form.querySelectorAll('input').forEach(input => input.addEventListener('input', (e) => {
        // Vérifie si le nombre de candidats sélectionnés atteint la limite maximum et affiche une alerte si c'est le cas
        if (selected() - 1 == ag_max) {
            alert(`Vous avez atteinds la limite de ${ag_max} candidats.\nVous devez déselectionner une autre personne pour choisir celle-ci`)
            e.target.checked = false;
            return;
        }
        // Met à jour l'affichage du statut après chaque modification de sélection
        displayStatus();
    }));

    const divStatus = document.querySelector('.vote-status .contenu');

    const bouton = document.querySelector('.vote-status button');

    /**
     * Mise à jour l'affichage du statut en fonction du nombre de candidats sélectionnés
     */
    function displayStatus() {
        // Obtient le nombre total de candidats et génère le contenu HTML en fonction du statut de la sélection
        const total = form.querySelectorAll('li').length;
        const html = [];
        // Détermine si le vote est autorisé en fonction de si l'utilisateur a déjà voté et si le nombre de sélectionnés est dans les limites permises
        const voteOk = !a_deja_vote && selected() >= ag_min && selected() <= ag_max;
        // Met à jour un attribut 'data-' sur le corps du document en fonction de si le vote est autorisé ou non
        document.body.dataset.voteOk = voteOk;

        // Active ou désactive le bouton de vote en fonction de si le vote est autorisé
        if (voteOk) {
            bouton.removeAttribute('disabled');
        } else {
            bouton.setAttribute('disabled', !voteOk);
        }
        // Si l'utilisateur a déjà voté, ne procède pas plus loin
        if (a_deja_vote) return;
        // Construit le contenu HTML à afficher en fonction du nombre de candidats sélectionnés et des règles du vote
        if (selected()) {
            if (selected() == ag_max) {
                html.push(`Vous avez sélectionné ${ag_max} candidats.`);

            } else if (selected() < ag_min) {
                html.push(`Vous devez encore sélectionner au moins <strong>${ag_min - selected()} candidat(s)</strong>.`);
            } else {
                html.push(`Vous avez sélectionné <strong>${selected()} candidat(e)${selected() > 1 ? 's' : ''}</strong>.`);
                html.push(`<small>Vous pouvez encore en choisir ${ag_max - selected()}</small>`);
            }
        } else if (ag_min) {
            html.push(`Vous devez sélectionner  ${ag_min} candidat(e)s, et ${ag_max} au maximum.`);
        } else {
            html.push(`Vous pouvez sélectionner jusqu'à ${ag_max} candidat(e)s.`);

        }
        // Met à jour le contenu de la div de statut avec le HTML généré
        divStatus.innerHTML = html.join('<br>');
    }

    /**
     * retourne le nombre de candidats actuellement sélectionnés
     * @returns int
     */
    function selected() {
        return form.querySelectorAll('li:has(input:checked)').length;

    }
    // Appelle la fonction displayStatus une première fois pour initialiser l'affichage 
    displayStatus();
})Nom du fichier : formulaire.inc.php
<?php


/**
 * Formualaire de vote
 */

if (!get_current_user_id()) {
    // page réservée aux membres connectés: Si personne n'est connecté, on redirige vers le formulaire de connexion
    wp_redirect('/mon-compte/?redirect=/candidats-au-conseil-d-administration/');
    exit;
}
$users = get_users_candidat_au_ca();
if (ag_depouillement()) {
    // Si la page est celle du dépouillement, la liste des utilisateurs est modifiée pour ne conserver que les élus 
    $users = ag_faire_depouillement($users);
}
?>
<center>
    <h2>Association Coworking Metz</h2>
    <h1>Élection du conseil d'administration</h1>
    <h2>Assemblée générale du
        <?= date('d/m/Y', strtotime(ag_date())); ?>
    </h2>
</center>

<form class="candidats" method="post" action="/election-ca">
    <input type="hidden" name="action" value="election-ca">
    <?php if (ag_depouillement()) { ?>
        <?php ag_recap_depouillement($users); ?>
    <?php } else { ?>
        <center>
            <?= count($users); ?> candidats au total
        </center>

        <?php if (ag_voter()) { ?>
            <div class="vote-status">
                <div class="contenu">
                    <?php if (!is_user_electeur()) { ?>
                        <strong>Vous ne pouvez pas participer à ce vote</strong>
                    <?php } ?>
                    <?php if (a_deja_vote()) { ?>
                        <strong>Votre vote pour cette élection a été pris en compte.</strong>
                    <?php } ?>
                </div>
                <div>
                    <?php if (is_user_electeur()) { ?>
                        <button class="btn" type="submit">Valider votre choix</button>
                    <?php } ?>
                </div>
            </div>
        <?php } ?>
    <?php } ?>
    <ul>
        <?php
        foreach ($users as $user) { ?>
            <li>
                <?php if (ag_voter() && !a_deja_vote()) { ?>
                    <input type="checkbox" name="candidats[]" value="<?= $user->ID; ?>"
                        title="Sélectionner <?= $user->display_name; ?>">
                <?php } ?>

                <span>
                    <strong>
                        <?= $user->display_name; ?>
                    </strong>
                    <?php if (ag_depouillement()) { ?>
                        <p>
                            <?= ag_candidat_votes($user->ID) ?> votes
                        </p>
                    <?php } ?>
                </span>
                <figure>
                    <img src="/polaroid/<?= $user->ID; ?>.jpg">
                </figure>
            </li>
        <?php } ?>
    </ul>
</form>
<br><br>
<br><br>
<br><br>
<script>
    // Variables mises à disposition de vote.js
    const a_deja_vote = <?=json_encode(a_deja_vote());?>;
    const ag_voter = <?= json_encode(ag_voter()); ?>;
    const ag_max = <?= ag_max(); ?>;
    const ag_min = <?= ag_min(); ?>;

</script>

<style>

</style>Nom du fichier : log.inc.php
<?php

/**
 * FONCTION DE LOGS
 * Pour consulter la log en temsp réeel, aller sur https://coworking-metz-ag.requestcatcher.com/
 */


/**
 * Enregistre un message d'erreur et termine le script.
 *
 * Cette fonction est utilisée pour enregistrer un message d'erreur dans un service externe
 * avant d'arrêter l'exécution du script PHP. Elle fait appel à `ag_log_message` pour l'enregistrement
 * du message et utilise `exit` pour arrêter l'exécution.
 *
 * @param string $message Le message d'erreur à enregistrer.
 */
function ag_log_erreur($message)
{
    ag_log_message($message);
    exit;
}

/**
 * Enregistre un message dans un service externe.
 *
 * Cette fonction envoie un message, avec des informations supplémentaires comme la date et l'heure actuelles,
 * l'adresse IP du client, l'ID de l'utilisateur actuel et le nom d'affichage de l'utilisateur,
 * à un service externe via une requête POST. 
 *
 * @param string $message Le message à enregistrer.
 */
function ag_log_message($message)
{
    // Préparation des données à envoyer
    $data = [
        'message' => $message,
        'datetime' => date('Y-m-d H:i:s'), // Date et heure actuelles
        'ip' => $_SERVER['REMOTE_ADDR'], // Adresse IP du client
        'uid'=> get_current_user_id(), // ID de l'utilisateur actuel
        'name'=> wp_get_current_user()->display_name??'', // Nom d'affichage de l'utilisateur actuel
    ];

    // Encodage des données en JSON
    $jsonPayload = json_encode($data, JSON_PRETTY_PRINT);

    // Initialisation de cURL
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, "https://coworking-metz-ag.requestcatcher.com/log");
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonPayload);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/json',
        'Content-Length: ' . strlen($jsonPayload)
    ]);

    // Exécution de la requête POST
    $response = curl_exec($ch);
    // Vérification des erreurs
    if (curl_errno($ch)) {
        echo 'Error:' . curl_error($ch);
    }
    // Fermeture de la session cURL
    curl_close($ch);
}
Nom du fichier : main.inc.php
<?php

/**
 * Inclusions des différents fichiers nécéssaires au fonctionnement
 */
include __DIR__ . '/vote.inc.php'; // fonctions relatives aux votes
include __DIR__ . '/users.inc.php'; // fonctions relatives aux utilisateurs et candidats
include __DIR__ . '/log.inc.php'; // fonctions de log
include __DIR__ . '/reglages.inc.php'; // fonctions pour lire les réglages de l'ag
include __DIR__ . '/depouillement.inc.php'; // fonctions relatives au dépouillement des votes

/**
 * Ajout des CSS et JS dédiées au formulaire de vote
 */
add_action('wp_enqueue_scripts', function () {
    if(is_admin()) return;
    if (is_page('election-ca')) {
        $base = '/wp-content/mu-plugins/includes/ag';
        $css = $base . '/vote.css';
        wp_enqueue_style('vote-style', $css, [], filemtime(ABSPATH.$css));
        $js = $base . '/vote.js';
        wp_enqueue_script('vote-script', $js, array (), filemtime(ABSPATH.$js), true);
    }
});

/**
 * Fonction utilisée par la page wordpress election-ca pour afficher le formulaire de vote
 */
function ag_candidats()
{
    include __DIR__ . '/formulaire.inc.php';
}


/**
 * Génère un UUID en utilisant l'API https://www.uuidtools.com/api/generate/v1
 *
 * Cette fonction fait une requête à l'API uuidtools pour générer un UUID de version 1.
 * Elle utilise cURL pour faire la requête et retourne l'UUID sous forme de chaîne de caractères.
 * En cas d'échec de la requête, elle retournera null.
 *
 * @return string|null L'UUID généré ou null en cas d'échec.
 */
function generate_uuid() {
    $curl = curl_init("https://www.uuidtools.com/api/generate/v1");
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    $response = curl_exec($curl);
    curl_close($curl);
    
    if ($response) {
        $uuids = json_decode($response);
        return $uuids[0] ?? null;
    }
    
    return null;
}Nom du fichier : README.md
Nom du fichier : reglages.inc.php
<?php

/**
 * Récupère les paramètres de l'assemblée générale depuis la page d'options ACF.
 *
 * Cette fonction utilise ACF pour récupérer les paramètres de l'assemblée générale
 * stockés dans les options du thème. Elle retourne un tableau avec tous les paramètres
 * liés à l'assemblée générale.
 *
 * @return array Les paramètres de l'assemblée générale.
 */
function ag_settings()
{
    return get_field('assemblee_generale', 'option');
}

/**
 * Récupère le nombre maximum de candidats pour le conseil d'administration.
 *
 * Cette fonction retourne le nombre maximum de candidats pour le conseil d'administration
 * défini dans les paramètres de l'assemblée générale. Si la valeur n'est pas définie,
 * elle retourne une valeur par défaut de 9.
 *
 * @return int Le nombre maximum de candidats pour le CA.
 */
function ag_max()
{
    return ag_settings()['scrutin']['ca_max'] ?? 9;
}

/**
 * Récupère le nombre minimum de candidats pour le conseil d'administration.
 *
 * Cette fonction retourne le nombre minimum de candidats pour le conseil d'administration
 * défini dans les paramètres de l'assemblée générale. Si la valeur n'est pas définie,
 * elle retourne une valeur par défaut de 0.
 *
 * @return int Le nombre minimum de candidats pour le CA.
 */
function ag_min()
{
    return ag_settings()['scrutin']['ca_min'] ?? 0;
}

/**
 * Récupère la date de l'assemblée générale.
 *
 * Cette fonction retourne la date de l'assemblée générale telle que définie dans les
 * paramètres. Si la date n'est pas définie, elle retourne false par défaut.
 *
 * @return string La date de l'assemblée générale.
 */
function ag_date()
{
    return ag_settings()['details']['ag_date'] ?? false;
}
Nom du fichier : users.inc.php
<?php

/**
 * FONCTION RELATIVES AUX UTILISATEURS ET CANDIDATS
 */

 
/**
 * Récupère tous les utilisateurs dont le meta 'candidat_au_ca' n'est pas false.
 *
 * @return WP_User[] Liste des utilisateurs.
 */
function get_users_candidat_au_ca($depouillement = false)
{
    $users = get_users([
        'meta_key' => 'candidat_au_ca',
        'meta_value' => '',
        'meta_compare' => '!=',
        'fields' => 'all',
    ]);

    $users = array_filter($users, function ($user) {
        return $user->candidat_au_ca;
    });
    shuffle($users);

    return $users;
}

/**
 * Retourne tous les comptes utilisateurs identifiés comme électeurs par l'API Tickets
 * La données est mise en cache pendant 12h pour éviter une surcharge d'appels à tickets
 * @return array
 */
function get_users_electeurs()
{
    // Check if the transient already exists
    $votants = get_transient('users_electeurs');
    if (false === $votants) {
        // Transient does not exist, so we fetch the data
        $json = file_get_contents('https://tickets.coworking-metz.fr/api/voting-members?key=bupNanriCit1');
        $votants = json_decode($json, true);
        // Store the result in a transient that expires after 12 hours (43200 seconds)
        set_transient('users_electeurs', $votants, 12 * HOUR_IN_SECONDS);
    }
    return $votants;
}
/**
 * Indique si un utilisateurs est considéré comme électeur
 * Un électeur est un membre ayant un age minimal (par exemple: 16 ans) et un nombre 
 * minimal de journées coworkées dans les X derniers mois (exemple : 20 journées sur 6 mois)
 * La règle de gestion précise est dans l'API Tcikets https://github.com/coworking-metz/tickets-backend
 */
function is_user_electeur($uid = false)
{

    if (!$uid)
        $uid = get_current_user_id();
    if (!$uid)
        return;
    $user = get_userdata($uid);
    if (!$user)
        return;

    if (isset($GLOBALS['is_user_electeur-' . $uid])) {
        return $GLOBALS['is_user_electeur-' . $uid];
    }
    $GLOBALS['is_user_electeur-' . $uid] = false;
    $votants = get_users_electeurs();
    foreach ($votants as $votant) {
        if ($votant['email'] == $user->user_email) {
            $GLOBALS['is_user_electeur-' . $uid] = true;
            return true;
        }
    }
}
Nom du fichier : vote.css
h1,
h2 {
    margin: 0 !important;
}

h2 {
    font-size: clamp(0.7rem, 5vmax, 1.5rem) !important;
}

h1 {
    font-size: clamp(1rem, 5vmax, 2rem) !important;
}



#wpadminbar,
#footer,
.titlebar {
    display: none !important;
}

.container {
    width: 99% !important;
}

#brevo-conversations {
    display: none !important;
}

.vote-status {
    padding: .5em;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    z-index: 99999999999;
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    background-color: #f3b100;
    flex-direction: column;
    text-align: center;
}

@media screen and (min-width: 600px) {
    .vote-status {
        gap: 2rem;
        flex-direction: row;
    }
}

.vote-status button {
    padding: .5em;
    color: black;
}

.candidats ul {
    margin: 0;
    padding: 0;
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-direction: row;
    flex-wrap: wrap;
}

.candidats li {
    padding: .5em;
    font-size: .8em;
}

.candidats li img {
    max-width: 40vw;
}

@media screen and (min-width: 600px) {
    .candidats {
        gap: 2rem;
    }

    .candidats li img {
        max-width: 200px;
    }

    .candidats li {
        padding: 1em;
    }
}

.candidats li {
    text-align: center;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    position: relative;
    border-radius: 5px;
}

.candidats li input {
    cursor: pointer;
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    z-index: 2;

}


.candidats li img {
    transition: opacity .5s ease;
    opacity: 0.8;
    width: 100%;
    height: auto;
    display: block;
}

@media screen and (min-width: 600px) {

    .candidats li:has(input):hover {
        background-color: #f3b100;
    }
}

.candidats li:has(input:checked) {
    background-color: green;
}

.candidats li:has(input:checked) img {
    opacity: 1;
}Nom du fichier : vote.inc.php
<?php

/**
 * FONCTIONS RELATIVES AUX VOTES
 */

/**
 * Gère le vote de l'utilisateur pour les candidats au conseil d'administration.
 * 
 * Ce code vérifie d'abord si le paramètre 'ag-vote' est présent dans l'URL. Si oui, il attache une fonction anonyme 
 * à l'action 'init' de WordPress. Cette fonction effectue les actions suivantes :
 * 1. Récupère l'ID de l'utilisateur actuel.
 * 2. Si aucun utilisateur n'est connecté, arrête l'exécution du script.
 * 3. Vérifie si l'utilisateur a déjà voté. Si oui, enregistre une erreur de tentative de vote multiple.
 * 4. Sauvegarde anonyme des votes de l'utilisateur pour les candidats sélectionnés.
 * 5. Redirige l'utilisateur vers la page des candidats au conseil d'administration.
 * 
 * @return void
 */

if (($_POST['action']??false) === 'election-ca') {
    add_action('init', function () {
        $uid = get_current_user_id();

        if (!$uid)
            exit;

        if (a_deja_vote($uid))
            ag_log_erreur('Tentative de vote multiple');

        ag_sauver_votes($uid, $_POST['candidats']);
        wp_redirect('/election-ca/');
        exit;
    });
}

/**
 * Vérifie si l'état du scrutin permet de voter
 * 
 * Cette fonction contrôle d'abord si le scrutin est ouvert en vérifiant l'état de 'etat_vote' dans la configuration du scrutin.
 * Elle vérifie ensuite si on est sur la page de dépouillement. Le vote n'est pas possible lors du dépouillement,
 * Elle verifie ensuite que l'utilisateur courant est autorisé à voter (membre électeur). 
 * Si l'une de ces conditions n'est pas remplie, la fonction termine son exécution.
 * Si toutes les vérifications sont passées, la fonction retourne true, indiquant que le vote est possible.
 * 
 * @return bool|null Retourne true si l'utilisateur peut voter, sinon null si une des conditions empêche le vote.
 */
function ag_voter()
{

    if (ag_settings()['scrutin']['etat_vote'] == 'closed')
        return;
    if (ag_depouillement())
        return;

    if (!is_user_electeur())
        return;

    return true;
}

/**
 * Compte le nombre d'électeurs ayant déjà voté pour une date donnée.
 * 
 * Cette fonction récupère le nombre d'utilisateurs ayant voté,
 * basé sur la date actuelle du scrutin. 
 * Le résultat est le nombre d'utilisateurs qui ont déjà voté.
 * 
 * @return int Le nombre d'utilisateurs ayant déjà voté.
 */
function ag_votants()
{
    $key = 'a-vote-' . ag_date();
    $args = [
        'meta_query' => [
            [
                'key' => $key,
                'compare' => 'EXISTS',
            ],
        ]
    ];

    $users = get_users($args);

    return count($users);
}

/**
 * Enregistre les votes d'un utilisateur pour les candidats sélectionnés.
 * 
 * Cette fonction génère un identifiant unique (UUID) pour le votant, récupère la date actuelle du scrutin. 
 * La fonction enregistre le vote avec l'heure actuelle et l'UUID généré. Elle met également à jour l'utilisateur pour indiquer
 * qu'il a voté à cette date. Un message est loggé pour confirmer l'enregistrement du vote.
 * 
 * @param int $uid L'ID de l'utilisateur votant.
 * @param array $candidats Les IDs des candidats sélectionnés.
 * @return void
 */
function ag_sauver_votes($uid, $candidats)
{
    $uuid = generate_uuid();

    $date = ag_date();
    $key = 'votes-' . $date;

    $candidats = $_POST['candidats'] ?? false;

    foreach ($candidats as $candidat) {
        $votes = get_user_meta($candidat, $key, true);
        if (!$votes) {
            $votes = [];
        }
        $votes[$uuid] = ['time' => time(), 'uuid' => $uuid];
        update_user_meta($candidat, $key, $votes);
    }

    update_user_meta($uid, 'a-vote-' . $date, true);
    ag_log_message('Vote enregistré');
}
/**
 * Vérifie si l'utilisateur a déjà voté pour la date courante.
 *
 * Cette fonction vérifie si l'utilisateur spécifié par son identifiant (ou l'utilisateur actuellement connecté
 * si aucun identifiant n'est fourni) a une métadonnée indiquant qu'il a voté pour la date courante.
 *
 * @param int|bool $uid L'identifiant de l'utilisateur. Si faux, utilise l'ID de l'utilisateur actuellement connecté.
 * @return mixed La valeur de la métadonnée 'a-vote-' suivi de la date actuelle si elle existe, faux sinon.
 */
function a_deja_vote($uid = false)
{
    if (!$uid)
        $uid = get_current_user_id();
    $date = ag_date();
    $key = 'a-vote-' . $date;
    return get_user_meta($uid, $key, true);
}
/**
 * Compte le nombre de votes pour un utilisateur donné pour la date d'ag courante.
 *
 * @param int $uid L'identifiant de l'utilisateur dont on veut compter les votes.
 * @return int Le nombre de votes pour l'utilisateur spécifié pour la date courante, ou zéro si aucune métadonnée n'existe.
 */
function ag_candidat_votes($uid)
{
    $date = ag_date();
    $key = 'votes-' . $date;

    $votes = get_user_meta($uid, $key, true);
    if (!$votes)
        return 0;

    return count($votes);
}


Nom du fichier : vote.js
/**
 * Gestion de l'interface de vote
 */

document.addEventListener('DOMContentLoaded', () => {
    const form = document.querySelector('form.candidats');
    // effectuer une action lorsque le formulaire est soumis
    form.addEventListener('submit', e => {
        // Affiche une boîte de confirmation avant de soumettre le formulaire, demandant une validation de l'utilisateur
        // Si l'utilisateur ne confirme pas, empêche la soumission du formulaire
        if (!confirm(`Vous avez choisi ${selected()} candidat(e)s. Voulez-vous valider votre choix ?\nVotre votre sera définitif et ne pourra être modifié. `)) {
            e.preventDefault();
            return false;
        }
    })

    // Sélectionne tous les champs de saisie du formulaire et ajoute un écouteur d'événements 'input' à chacun
    form.querySelectorAll('input').forEach(input => input.addEventListener('input', (e) => {
        // Vérifie si le nombre de candidats sélectionnés atteint la limite maximum et affiche une alerte si c'est le cas
        if (selected() - 1 == ag_max) {
            alert(`Vous avez atteinds la limite de ${ag_max} candidats.\nVous devez déselectionner une autre personne pour choisir celle-ci`)
            e.target.checked = false;
            return;
        }
        // Met à jour l'affichage du statut après chaque modification de sélection
        displayStatus();
    }));

    const divStatus = document.querySelector('.vote-status .contenu');

    const bouton = document.querySelector('.vote-status button');

    /**
     * Mise à jour l'affichage du statut en fonction du nombre de candidats sélectionnés
     */
    function displayStatus() {
        // Obtient le nombre total de candidats et génère le contenu HTML en fonction du statut de la sélection
        const total = form.querySelectorAll('li').length;
        const html = [];
        // Détermine si le vote est autorisé en fonction de si l'utilisateur a déjà voté et si le nombre de sélectionnés est dans les limites permises
        const voteOk = !a_deja_vote && selected() >= ag_min && selected() <= ag_max;
        // Met à jour un attribut 'data-' sur le corps du document en fonction de si le vote est autorisé ou non
        document.body.dataset.voteOk = voteOk;

        // Active ou désactive le bouton de vote en fonction de si le vote est autorisé
        if (voteOk) {
            bouton.removeAttribute('disabled');
        } else {
            bouton.setAttribute('disabled', !voteOk);
        }
        // Si l'utilisateur a déjà voté, ne procède pas plus loin
        if (a_deja_vote) return;
        // Construit le contenu HTML à afficher en fonction du nombre de candidats sélectionnés et des règles du vote
        if (selected()) {
            if (selected() == ag_max) {
                html.push(`Vous avez sélectionné ${ag_max} candidats.`);

            } else if (selected() < ag_min) {
                html.push(`Vous devez encore sélectionner au moins <strong>${ag_min - selected()} candidat(s)</strong>.`);
            } else {
                html.push(`Vous avez sélectionné <strong>${selected()} candidat(e)${selected() > 1 ? 's' : ''}</strong>.`);
                html.push(`<small>Vous pouvez encore en choisir ${ag_max - selected()}</small>`);
            }
        } else if (ag_min) {
            html.push(`Vous devez sélectionner  ${ag_min} candidat(e)s, et ${ag_max} au maximum.`);
        } else {
            html.push(`Vous pouvez sélectionner jusqu'à ${ag_max} candidat(e)s.`);

        }
        // Met à jour le contenu de la div de statut avec le HTML généré
        divStatus.innerHTML = html.join('<br>');
    }

    /**
     * retourne le nombre de candidats actuellement sélectionnés
     * @returns int
     */
    function selected() {
        return form.querySelectorAll('li:has(input:checked)').length;

    }
    // Appelle la fonction displayStatus une première fois pour initialiser l'affichage 
    displayStatus();
})